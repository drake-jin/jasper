---
layout: post
title: (스터디) 도커.araboza - 3
category: docker
image: /assets/posts/res/2017-04-08/docker.png
tags: [docker, virtualization, container, Immutable Infrastructure, pyrasis]
---
[데이터 공작소] 데이터 공작소는 도커는 어떻게 공부할것인가! 처음 시작하는 도커에 대해 공부를 시작합니다. 이 문서의 저작권은 ![pyrasis.com](http://pyrasis.com/private/2014/11/30/publish-docker-for-the-really-impatient-book) 여기에 있습니다. 혼자 공부하려고 글들의 내용을 참고하였습니다. 문제시 삭제하겠습니다. 



## 도커 기본 명령어

docker 명령어는 sudo 명령어와 함께하거나 root사용자로 이용해야 합니다. 

### search 
search명령어로 docker hub에 올라와있는 이미지를 검색하기 ![docker hub](https://registry.hub.docker.com)에 유명 이미지들은 {user}/{image}이런 형식이 아니라 {image}명만 있습니다.

``` bash
 $ sudo docker search {image_name}
```

###### 실행 화면
![sudo docker search](images/sudo_docker_search.png)


### pull 
pull 명령어는 dockerhub에 있는 이미지를 다운받는데 사용합니다.

``` bash
 $ sudo docker pull {image_name}:{tag}
```
tag자리에 latest를 입력하면 이미지의 최신버전을 다운받습니다. 
- ![docker tags](https://hub.docker.com/r/library/ubuntu/tags/)
위 링크에서 tag 자리에 올 적합한 버전을 찾아서 입력하면 해당 tag 버전으로 설치할 수 있습니다.


##### 실행 화면
![sudo docker pull iamges_name_tag](images/sudo_docker_pull.png)


### images 
다운받은 이미지 목록 출력하기

```
 $ sudo docker images 
``` 
위 명령은 모든 이미지 목록을 출력합니다. 

##### 실행화면

![sudo docker images](images/sudo_docker_images.png)

### run 
컨테이너 생성하는 명령어, 다운 받은 이미지를 기반으로 컨테이너를 만듭니다.

``` bash
$ sudo docker run -i -t --name {container_name} {image_name} {login_shell}
```
 - -i : Interactive => 실행된 셸의 입출력을 사용합니다.
 - -t : Pseudo-tty => 로그인 셸을 어떤걸 사용할 지 정합니다.
 - --name : 컨테이너의 이름을 지정합니다, 이를 설정하지 않으면 도커에서 임의로 설정하게 됩니다.

이 과정을 통해 호스트 OS와 완전히 격리된 공간이 생기게 되었습니다. 

> 빠져나오기 
> - ctrl + p & ctrl + q => 해당 컨테이너를 종료하지 않고 나옵니다.
> - exit : 해당 컨테이너를 종료하고 나옵니다.


##### 실행화면 

 ![sudo docker run -i -t --name](images/sudo_docker_run.png)


### ps
컨테이너의 목록 확인하기

``` bash
$ sudo docker ps -a 
```
-a옵션은 정지된 컨테이너 까지 모두 출력하고, 옵션을 사용하지 않으면 컨테이너만 출력합니다. 

##### 실행화면

 ![sudo docker ps](images/sudo_docker_ps.png)

### start
 정지된 컨테이너를 구동시킬 때 사용한다. 

``` bash
 $ sudo docker start {container_name}
```

##### 실행화면 

 ![sudo docker start](images/sudo_docker_start.png)

### stop
 실행된 컨테이너를 정지 시킬 때 사용한다.

``` bash
 $ sudo docker stop {container_name} 
```

##### 실행화면 
 
 ![sudo_docker_stop](images/sudo_docker_stop.png)

### restart

 실행된 컨테이너를 재구동 하기위해 사용한다.

``` bash
 $ sudo docker restart {container_name}
```

##### 실행화면 

 ![sudo docker restart](images/sudo_docker_restart.png)
 
### attach
 실행된 컨테이너에 접속하기위해 사용한다.
``` bash
 $ sudo docker attach {container_name}
```


##### 실행화면 

 ![sudo docker attach](images/sudo_docker_attach.png)

### exec 
 실행된 컨테이너에 접속하지않고 명령어를 수행하기 위해 사용한다. 결과창은 Host OS 에서 확인 할 수 있다.

``` bash
 $ sudo docker exec {container_name} [arg[0], arg[1], arg[2], arg[3]]
```

##### 실행화면 

 ![sudo docker exec](images/sudo_docker_exec.png)

### rm
 생성된 컨테이너를 삭제한다. 실행되고 있는 컨테이너는 제거할 수 없다.
 
``` bash
 $ sudo docker rm {container_name}
```

##### 실행화면

 ![sudo_docker_rm](images/sudo_docker_rm.png)

### rmi
 설치한 이미지를 삭제한다. 단 삭제하려는 이미지로 생성한 컨테이너가 사용중이거나 만들어져있다면 삭제할 수 없다. 
``` bash
 $ sudo docker rmi {image_name}:{tag}
```

##### 실행화면
 
 ![sudo_docker_rmi](images/sudo_docker_rmi.png)



